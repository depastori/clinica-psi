import { useState } from "react";
import { useQuery, useMutation } from "convex/react";
import { api } from "../../convex/_generated/api";
import { Id } from "../../convex/_generated/dataModel";
import { toast } from "sonner";

export default function BillingManagement() {
  const [activeTab, setActiveTab] = useState<'invoices' | 'receipts' | 'create'>('invoices');
  const [selectedPatientId, setSelectedPatientId] = useState<Id<"patients"> | null>(null);
  const [selectedAppointments, setSelectedAppointments] = useState<Id<"appointments">[]>([]);
  const [showInvoicePreview, setShowInvoicePreview] = useState<string | null>(null);
  const [showReceiptPreview, setShowReceiptPreview] = useState<string | null>(null);

  const [invoiceForm, setInvoiceForm] = useState({
    description: "",
    paymentDate: "",
    currency: "BRL" as "BRL" | "EUR",
    customAmount: 0,
    useCustomAmount: false,
  });

  const invoices = useQuery(api.invoices.getInvoicesByTherapist, {}) || [];
  const receipts = useQuery(api.receipts.getReceiptsByTherapist, {}) || [];
  const patients = useQuery(api.patients.getAllPatients) || [];
  const appointments = useQuery(
    api.appointments.getAppointmentsByPatient,
    selectedPatientId ? { patientId: selectedPatientId } : "skip"
  ) || [];

  const createInvoice = useMutation(api.invoices.createInvoice);
  const calculateAmount = useMutation(api.invoices.calculateInvoiceAmount);
  const generateInvoiceHTML = useMutation(api.invoices.generateInvoiceHTML);
  const markAsPaid = useMutation(api.invoices.markInvoiceAsPaid);
  const createReceipt = useMutation(api.receipts.createReceipt);
  const generateReceiptHTML = useMutation(api.receipts.generateReceiptHTML);

  const completedAppointments = appointments.filter(apt => apt.status === "completed");

  const handleCreateInvoice = async () => {
    if (!selectedPatientId || selectedAppointments.length === 0) {
      toast.error("Selecione um paciente e pelo menos uma sess√£o");
      return;
    }

    try {
      let amount = invoiceForm.customAmount;
      let sessionDetails = "";

      if (!invoiceForm.useCustomAmount) {
        const calculation = await calculateAmount({
          patientId: selectedPatientId,
          appointmentIds: selectedAppointments,
          currency: invoiceForm.currency,
        });
        amount = calculation.totalAmount;
        sessionDetails = calculation.sessionDetails;
      }

      await createInvoice({
        patientId: selectedPatientId,
        amount,
        currency: invoiceForm.currency,
        description: invoiceForm.description,
        paymentDate: invoiceForm.paymentDate,
        appointmentIds: selectedAppointments,
        sessionDetails,
      });

      toast.success("Cobran√ßa criada com sucesso!");
      
      // Reset form
      setSelectedPatientId(null);
      setSelectedAppointments([]);
      setInvoiceForm({
        description: "",
        paymentDate: "",
        currency: "BRL",
        customAmount: 0,
        useCustomAmount: false,
      });
      
      setActiveTab('invoices');
    } catch (error) {
      toast.error("Erro ao criar cobran√ßa");
    }
  };

  const handleMarkAsPaid = async (invoiceId: Id<"invoices">, paymentMethod: string) => {
    try {
      await markAsPaid({
        invoiceId,
        paymentMethod: paymentMethod as any,
      });
      toast.success("Pagamento confirmado!");
    } catch (error) {
      toast.error("Erro ao confirmar pagamento");
    }
  };

  const handleGenerateReceipt = async (invoiceId: Id<"invoices">) => {
    try {
      const result = await createReceipt({ invoiceId });
      toast.success("Recibo gerado com sucesso!");
      setActiveTab('receipts');
    } catch (error) {
      toast.error("Erro ao gerar recibo");
    }
  };

  const handlePreviewInvoice = async (invoiceId: Id<"invoices">) => {
    try {
      const result = await generateInvoiceHTML({ invoiceId });
      setShowInvoicePreview(result.html);
    } catch (error) {
      toast.error("Erro ao gerar preview");
    }
  };

  const handlePreviewReceipt = async (receiptId: Id<"receipts">) => {
    try {
      const result = await generateReceiptHTML({ receiptId });
      setShowReceiptPreview(result.html);
    } catch (error) {
      toast.error("Erro ao gerar preview");
    }
  };

  const downloadHTML = (html: string, filename: string) => {
    const blob = new Blob([html], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      <div className="bg-white rounded-lg shadow-sm border">
        <div className="border-b">
          <nav className="flex space-x-8 px-6">
            <button
              onClick={() => setActiveTab('invoices')}
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'invoices'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              üí∞ Cobran√ßas ({invoices.length})
            </button>
            <button
              onClick={() => setActiveTab('receipts')}
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'receipts'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              üßæ Recibos ({receipts.length})
            </button>
            <button
              onClick={() => setActiveTab('create')}
              className={`py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === 'create'
                  ? 'border-blue-500 text-blue-600'
                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
              }`}
            >
              ‚ûï Nova Cobran√ßa
            </button>
          </nav>
        </div>

        <div className="p-6">
          {activeTab === 'invoices' && (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-gray-900">Cobran√ßas</h3>
              
              {invoices.length === 0 ? (
                <div className="text-center py-8 text-gray-500">
                  Nenhuma cobran√ßa criada ainda
                </div>
              ) : (
                <div className="space-y-4">
                  {invoices.map((invoice) => (
                    <div key={invoice._id} className="border rounded-lg p-4">
                      <div className="flex items-center justify-between mb-3">
                        <div>
                          <h4 className="font-medium text-gray-900">
                            {invoice.patient?.fullName}
                          </h4>
                          <p className="text-sm text-gray-600">
                            INV-{invoice._id} ‚Ä¢ {new Date(invoice.createdAt).toLocaleDateString('pt-BR')}
                          </p>
                        </div>
                        <div className="text-right">
                          <p className="font-semibold text-lg">
                            {invoice.currency === 'EUR' ? '‚Ç¨' : 'R$'} {invoice.amount.toFixed(2)}
                          </p>
                          <span className={`px-2 py-1 text-xs rounded-full ${
                            invoice.status === 'pending' 
                              ? 'bg-yellow-100 text-yellow-800'
                              : invoice.status === 'paid'
                              ? 'bg-green-100 text-green-800'
                              : 'bg-red-100 text-red-800'
                          }`}>
                            {invoice.status === 'pending' ? 'Pendente' : 
                             invoice.status === 'paid' ? 'Pago' : 'Cancelado'}
                          </span>
                        </div>
                      </div>
                      
                      <p className="text-sm text-gray-600 mb-3">{invoice.description}</p>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewInvoice(invoice._id)}
                          className="px-3 py-1 text-sm bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200"
                        >
                          üëÅÔ∏è Visualizar
                        </button>
                        
                        {invoice.status === 'pending' && (
                          <>
                            <select
                              onChange={(e) => {
                                if (e.target.value) {
                                  handleMarkAsPaid(invoice._id, e.target.value);
                                  e.target.value = '';
                                }
                              }}
                              className="px-3 py-1 text-sm border border-gray-300 rounded-md"
                            >
                              <option value="">Marcar como Pago</option>
                              <option value="pix">PIX</option>
                              <option value="cartao_credito">Cart√£o</option>
                              <option value="mbway">MBWay</option>
                              <option value="paypal">PayPal</option>
                              <option value="manual">Transfer√™ncia</option>
                            </select>
                          </>
                        )}
                        
                        {invoice.status === 'paid' && (
                          <button
                            onClick={() => handleGenerateReceipt(invoice._id)}
                            className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                          >
                            üßæ Gerar Recibo
                          </button>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'receipts' && (
            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-gray-900">Recibos</h3>
              
              {receipts.length === 0 ? (
                <div className="text-center py-8 text-gray-500">
                  Nenhum recibo gerado ainda
                </div>
              ) : (
                <div className="space-y-4">
                  {receipts.map((receipt) => (
                    <div key={receipt._id} className="border rounded-lg p-4">
                      <div className="flex items-center justify-between mb-3">
                        <div>
                          <h4 className="font-medium text-gray-900">
                            {receipt.patient?.fullName}
                          </h4>
                          <p className="text-sm text-gray-600">
                            {receipt.receiptNumber} ‚Ä¢ {new Date(receipt.generatedAt).toLocaleDateString('pt-BR')}
                          </p>
                        </div>
                        <div className="text-right">
                          <p className="font-semibold text-lg">
                            {receipt.currency === 'EUR' ? '‚Ç¨' : 'R
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2).replace('.', ',')}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
} {receipt.amount.toFixed(2)}
                          </p>
                          <span className="px-2 py-1 text-xs rounded-full bg-green-100 text-green-800">
                            ‚úì Pago
                          </span>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <button
                          onClick={() => handlePreviewReceipt(receipt._id)}
                          className="px-3 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200"
                        >
                          üëÅÔ∏è Visualizar Recibo
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {activeTab === 'create' && (
            <div className="space-y-6">
              <h3 className="text-lg font-semibold text-gray-900">Nova Cobran√ßa</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Paciente *
                  </label>
                  <select
                    value={selectedPatientId || ''}
                    onChange={(e) => {
                      setSelectedPatientId(e.target.value as Id<"patients"> || null);
                      setSelectedAppointments([]);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Selecione um paciente</option>
                    {patients.map((patient) => (
                      <option key={patient._id} value={patient._id}>
                        {patient.fullName}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Moeda *
                  </label>
                  <select
                    value={invoiceForm.currency}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, currency: e.target.value as "BRL" | "EUR" }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="BRL">Real (BRL)</option>
                    <option value="EUR">Euro (EUR)</option>
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Descri√ß√£o *
                  </label>
                  <input
                    type="text"
                    value={invoiceForm.description}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, description: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Ex: Sess√µes de Psican√°lise - Janeiro 2024"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Data de Vencimento *
                  </label>
                  <input
                    type="date"
                    value={invoiceForm.paymentDate}
                    onChange={(e) => setInvoiceForm(prev => ({ ...prev, paymentDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={invoiceForm.useCustomAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, useCustomAmount: e.target.checked }))}
                      className="mr-2"
                    />
                    <span className="text-sm font-medium text-gray-700">Usar valor personalizado</span>
                  </label>
                  
                  {invoiceForm.useCustomAmount && (
                    <input
                      type="number"
                      step="0.01"
                      min="0"
                      value={invoiceForm.customAmount}
                      onChange={(e) => setInvoiceForm(prev => ({ ...prev, customAmount: parseFloat(e.target.value) || 0 }))}
                      className="w-full mt-2 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      placeholder="Valor personalizado"
                    />
                  )}
                </div>
              </div>

              {selectedPatientId && completedAppointments.length > 0 && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sess√µes Realizadas
                  </label>
                  <div className="border rounded-md p-4 max-h-60 overflow-y-auto">
                    {completedAppointments.map((appointment) => (
                      <label key={appointment._id} className="flex items-center mb-2">
                        <input
                          type="checkbox"
                          checked={selectedAppointments.includes(appointment._id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedAppointments(prev => [...prev, appointment._id]);
                            } else {
                              setSelectedAppointments(prev => prev.filter(id => id !== appointment._id));
                            }
                          }}
                          className="mr-3"
                        />
                        <span className="text-sm">
                          {new Date(appointment.date + 'T00:00:00').toLocaleDateString('pt-BR')} √†s {appointment.time} - 
                          {appointment.duration || 60}min ({appointment.treatmentType})
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              )}

              <div className="flex justify-end">
                <button
                  onClick={handleCreateInvoice}
                  disabled={!selectedPatientId || (!invoiceForm.useCustomAmount && selectedAppointments.length === 0) || !invoiceForm.description || !invoiceForm.paymentDate}
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Cobran√ßa
                </button>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Invoice Preview Modal */}
      {showInvoicePreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview da Cobran√ßa</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showInvoicePreview, 'cobranca.html')}
                  className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowInvoicePreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showInvoicePreview}
                className="w-full h-full min-h-[600px]"
                title="Invoice Preview"
              />
            </div>
          </div>
        </div>
      )}

      {/* Receipt Preview Modal */}
      {showReceiptPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Preview do Recibo</h3>
              <div className="flex gap-2">
                <button
                  onClick={() => downloadHTML(showReceiptPreview, 'recibo.html')}
                  className="px-3 py-1 bg-green-600 text-white rounded-md hover:bg-green-700"
                >
                  üì• Download
                </button>
                <button
                  onClick={() => setShowReceiptPreview(null)}
                  className="text-gray-400 hover:text-gray-600"
                >
                  <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
            </div>
            <div className="overflow-y-auto max-h-[calc(90vh-80px)]">
              <iframe
                srcDoc={showReceiptPreview}
                className="w-full h-full min-h-[600px]"
                title="Receipt Preview"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
