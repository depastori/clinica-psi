import { useState } from "react";
import { useMutation, useQuery } from "convex/react";
import { api } from "../../../convex/_generated/api";

export default function CreateChargePage() {
  const patients = useQuery(api.patients.listPatients, {}); // vamos precisar garantir essa query existindo
  const createManualCharge = useMutation(api.charges.createManualCharge);

  const [form, setForm] = useState({
    patientName: "",
    description: "",
    amount: "",
    currency: "BRL",
    dueDate: "",
  });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!form.patientName || !form.description || !form.amount || !form.dueDate) {
      alert("Preencha todos os campos obrigat√≥rios");
      return;
    }

    try {
      const result = await createManualCharge({
        patientName: form.patientName,
        description: form.description,
        amount: parseFloat(form.amount),
        currency: form.currency as "BRL" | "EUR",
        dueDate: new Date(form.dueDate).getTime(),
        paymentOptions: [], // por enquanto vazio
      });

      alert(`Cobran√ßa criada com sucesso! N¬∫ ${result.chargeNumber}`);
      window.location.href = "/charges";
    } catch (err: any) {
      alert("Erro ao criar cobran√ßa: " + err.message);
    }
  };

  return (
    <div style={{ maxWidth: "600px", margin: "0 auto", padding: "20px" }}>
      <h1>üÜï Nova Cobran√ßa</h1>
      <form onSubmit={handleSubmit} style={{ display: "flex", flexDirection: "column", gap: "15px" }}>
        <div>
          <label>Paciente *</label>
          <select
            name="patientName"
            value={form.patientName}
            onChange={handleChange}
            required
            style={{ width: "100%", padding: "8px" }}
          >
            <option value="">Selecione um paciente</option>
            {patients?.map((p) => (
              <option key={p._id} value={p.fullName}>{p.fullName}</option>
            ))}
          </select>
        </div>

        <div>
          <label>Descri√ß√£o *</label>
          <input
            type="text"
            name="description"
            value={form.description}
            onChange={handleChange}
            required
            style={{ width: "100%", padding: "8px" }}
          />
        </div>

        <div>
          <label>Valor *</label>
          <input
            type="number"
            name="amount"
            value={form.amount}
            onChange={handleChange}
            required
            step="0.01"
            style={{ width: "100%", padding: "8px" }}
          />
        </div>

        <div>
          <label>Moeda</label>
          <select
            name="currency"
            value={form.currency}
            onChange={handleChange}
            style={{ width: "100%", padding: "8px" }}
          >
            <option value="BRL">R$ Real (BR)</option>
            <option value="EUR">‚Ç¨ Euro</option>
          </select>
        </div>

        <div>
          <label>Data de Vencimento *</label>
          <input
            type="date"
            name="dueDate"
            value={form.dueDate}
            onChange={handleChange}
            required
            style={{ width: "100%", padding: "8px" }}
          />
        </div>

        <button
          type="submit"
          style={{
            padding: "12px",
            backgroundColor: "#2563eb",
            color: "white",
            border: "none",
            borderRadius: "5px",
            cursor: "pointer",
          }}
        >
          Criar Cobran√ßa
        </button>
      </form>
    </div>
  );
}
